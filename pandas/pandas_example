import pandas as pd

def big_countries(world: pd.DataFrame) -> pd.DataFrame:
    df = world[(world['area'] >= 3000000) | (world['population'] >= 25000000)]
    return df[['name','population','area']]


import pandas as pd

def find_products(products: pd.DataFrame) -> pd.DataFrame:
    df = products[(products['low_fats'] == 'Y') & (products['recyclable'] == 'Y')]
    return df[['product_id']]


# Write your MySQL query statement below
# SELECT name as Customers
# FROM Customers
# INNER JOIN Orders
# ON Customers.id = Orders.customerId

#The above inner join won't work as it will not give us the desired names, instead the complete opposite


# Sol1
# SELECT name as Customers
# FROM Customers
# WHERE Customers.id NOT IN (SELECT customerId from Orders)

# #Sol2
# Select name as customers
# FROM Customers
# LEFT JOIN Orders
# On Customers.id= Orders.customerId
# WHERE customerId is NULL

#Sol3
SELECT name as Customers
FROM Customers
WHERE NOT EXISTS (SELECT 1 FROM orders WHERE Customers.id= Orders.customerId)


import pandas as pd

def find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:
    # df = customers[~customers['id'].isin(orders['customerId'])]
    # df = df[['name']].rename(columns={'name':'Customers'})
    # return df

    #sol2
    df = customers.merge(orders, left_on='id', right_on='customerId', how='left')
    df = df[df['customerId'].isna()]
    df = df[['name']].rename(columns={'name': 'Customers'})
    return df



Q.4
# Write your MySQL query statement below
Select DISTINCT author_id as id
from Views
where author_id=viewer_id ORDER BY author_id

import pandas as pd

def article_views(views: pd.DataFrame) -> pd.DataFrame:
    df = views[views['author_id']==views['viewer_id']]
    df = df[['author_id']].rename(columns={'author_id':'id'})
    df = df.sort_values(by='id')
    return df.drop_duplicates()

